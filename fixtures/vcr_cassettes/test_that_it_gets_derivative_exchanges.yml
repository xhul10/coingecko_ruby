---
http_interactions:
- request:
    method: get
    uri: https://api.coingecko.com/api/v3/derivatives/exchanges
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - api.coingecko.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 18 May 2021 14:01:32 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Link:
      - <https://api.coingecko.com/api/v3/derivatives/exchanges?page=2>; rel="last",
        <https://api.coingecko.com/api/v3/derivatives/exchanges?page=2>; rel="next"
      Per-Page:
      - '50'
      Total:
      - '54'
      Cache-Control:
      - public, max-age=60
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Methods:
      - POST, PUT, DELETE, GET, OPTIONS
      Access-Control-Request-Method:
      - "*"
      Access-Control-Allow-Headers:
      - Origin, X-Requested-With, Content-Type, Accept, Authorization
      Access-Control-Expose-Headers:
      - link, per-page, total
      Vary:
      - Accept-Encoding, Origin
      Etag:
      - W/"e2f5e4ad1d3b3f1284004a4a0d8d8112"
      X-Request-Id:
      - 2b7804c4-8a0a-4f65-b741-73761587176a
      X-Runtime:
      - '1.971568'
      Alternate-Protocol:
      - 443:npn-spdy/2
      Cf-Cache-Status:
      - MISS
      Expires:
      - Tue, 18 May 2021 14:02:32 GMT
      Cf-Request-Id:
      - 0a21612f420000d93ea9b2c000000001
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Server:
      - cloudflare
      Cf-Ray:
      - 65159e2b9900d93e-HKG
      Alt-Svc:
      - h3-27=":443"; ma=86400, h3-28=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Tue, 18 May 2021 14:01:32 GMT
recorded_with: VCR 6.0.0
